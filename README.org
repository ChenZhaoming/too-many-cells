#+TITLE: too-many-cells
#+AUTHOR: Gregory W. Schwartz
#+OPTIONS: date:nil creator:nil timestamp:nil toc:t

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* Description

=too-many-cells= is an "ism". That is, /too manyism/. More specifically,
=too-many-cells= is a different perspective on existing single cell tools.
Rather than opt for a unique positioning of each cell using dimensionality
reduction approaches like tSNE, PCA, and other, =too-many-cells= recursively
divides cells into clusters and relates clusters rather than individual cells.
In fact, by recursively dividing until further dividing would be considered
noise or random partitioning, we can eliminate noisy relationships at the
fine-grain level. The resulting binary tree serves as a basis for a different
perspective of single cells, using our =birch-beer= visualization and tree
measures to describe simultaneously large and small populations, without
additional parameters or runs. See below for a full list of features.

* Installation

** Install =stack=

See [[https://docs.haskellstack.org/en/stable/README/]] for more details.

#+BEGIN_SRC sh
curl -sSL https://get.haskellstack.org/ | sh
stack setup
#+END_SRC

** Install =too-many-cells=

*** Online

#+BEGIN_SRC sh
stack install too-many-cells
#+END_SRC

*** Source

#+BEGIN_SRC sh
stack install
#+END_SRC

* Usage

=too-many-cells= has several entry points depending on the desired analysis. 

| Argument       | Analysis                                                                                    |
|----------------+---------------------------------------------------------------------------------------------|
| =make-tree=    | Generate the tree from single cell data with various measurement outputs and visualize tree |
| =interactive=  | Interactive visuzalization of the tree, very slow                                           |
| =differential= | Find differentially expressed genes between two nodes                                       |
| =diversity=    | Conduct diversity analyses of multiple cell populations                                     |
| =paths=        | The binary tree equivalent of the so called "pseudotime", or 1D dimensionality reduction    |

The main workflow is to first generate and plot the population tree using
=too-many-cells make-tree=, then use the rest of the entry points as needed.

At any point, use =-h= to see the help of each entry point.

** =make-tree=

=too-many-cells make-tree= generates a binary tree using hierarchical spectral
clustering. We start with all cells in a single node. Spectral clustering
partitions the cells into two groups. We assess the clustering using
Newman-Girvan modularity: if \(Q > 0\) then we recursively continue with
hierarchical spectral clustering. If not, then there is only a single community
and we do not partition -- the resulting node is a leaf and is considered the
finest-grain cluster.

*The most important argument is the =--prior= argument.* Making the tree may
take some time, so if the tree was already generated and other analysis or
visualizations need to be run on the tree, point the =--prior= argument to the
output folder from a previous run of =too-many-cells=. *If you do not use
=--prior=, the entire tree will be recalculated even if you just wanted to
change the visualization!*

The main input is the =--matrix-path= argument. When a directory is supplied,
=too-many-cells= interprets the folder to have =matrix.mtx=, =genes.tsv=, and
=barcodes.tsv= files (=cellranger= outputs, see =cellranger= for specifics). If
a file is supplied, we assume a =csv= file containing gene row names and cell
column names. This argument can be called multiple times to combine multiple
single cell matrices: =--matrixPath input1 --matrixPath input2=.

The second most important argument is =--labels-file=. Supply with a =csv= with
a format and header of "item,label" to provide colorings and statistics of the
relationships between labels. Here the "item" column contains the name of each
cell (barcode) and the label is any property of the cell (the tissue of origin,
hour in a time course, celltype, etc.).

To see the full list of options, use =too-many-cells -h=.

*** Output

=too-many-cells make-tree= generates several files in the output folder. Below
is a short description of each file.

| File                    | Description                                                                                                                                                                                                                          |
|-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =clumpiness.csv=        | When labels are provided, uses the clumpiness measure to determine the level of aggregation between each label within the tree.                                                                                                      |
| =clumpiness.pdf=        | When labels are provided, a figure of the clumpiness between labels.                                                                                                                                                                 |
| =cluster_diversity.csv= | When labels are provided, the diversity, or "effective number of labels", of each cluster.                                                                                                                                           |
| =cluster_info.csv=      | Various bits of information for each cluster and the path leading up to each cluster, from that cluster to the root. For instance, the =size= column has =cluster_size/parent_size/parent_parent_size/.../root_size=                 |
| =cluster_results.json=  | The =json= file containing a list of clusterings and the output tree in a recursive format.                                                                                                                                          |
| =dendrogram.svg=        | The visualization of the tree. There are many possible options for this visualization included.                                                                                                                                      |
| =graph.dot=             | A =dot= file of the tree, with less information than the tree in =cluster_results.json=.                                                                                                                                             |
| =node_info.csv=         | Various information of each node in the tree.                                                                                                                                                                                        |
| =projection.pdf=        | When =--projection= is supplied with a file of the format "barcode,x,y", provides a plot of each cell at the specified x and y coordinates (for instance, when looking at tSNE plots with the same labelings as the dendrogram here. |

*** Example

**** Setup

We start with our input matrix.

#+HEADER: :results output verbatim
#+BEGIN_SRC sh
ls ./input
#+END_SRC

#+RESULTS:
: barcodes.tsv  genes.tsv  matrix.mtx

We also know where each cell came from, so we mark that down as well in a
=labels.csv= file.

#+CAPTION: labels.csv
#+BEGIN_EXAMPLE
item,label
TTTGTCATCGGCTTGG-1,Trachea
TTTGTCATCTTACCGC-1,Trachea
TTTGTCATCTTGTTTG-1,Trachea
...
#+END_EXAMPLE

**** Default run

We can now run the =too-many-cells= algorithm on our data.

#+BEGIN_SRC sh
too-many-cells make-tree \
    --matrix-path input \
    --labels-file labels.csv \
    --output out
#+END_SRC

[[file:img/complete_default_tree.svg]]

**** Pruning tree

Large cell populations can result in a very large tree. What if we only want to
see larger subpopulations rather than the large (inner nodes) and small
(leaves)? We can use the =--min-size 100= argument to set the minimum size of a
leaf to 100 in this case. Alternatively, we can specify =--smart-cutoff 4= in
addition to =--min-size 1= to set the minimum size of a node to \(4 *
\text{median absolute deviation (MAD)}\) of the nodes in the original tree.
Varying the number of MADs varies the number of leaves in the tree.
=--smart-cutoff= should be used in addition to =--min-size=, =max-proportion=,
or =min-distance= to decide which cutoff variable to use. The value supplied to
the cutoff variable is ignored when =--smart-cutoff= is specified. We'll prune
the tree for better visibility in this document.

*Note: the pruning arguments change the tree file, not just the plot, so be sure
to output into a different directory.*

Also, *we do not need to recalculate the entire tree!* We can just supply the
previous results using =--prior= (we can also remove =--matrix-path= with
=--prior= to speed things up, but miss out on some features if needed):

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --output pruned_out
#+END_SRC

[[file:img/pruned_tree.svg]]

**** Pie charts

What if we want pie charts instead of showing each individual cell?

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-collection "PieChart" \
    --output pruned_out
#+END_SRC

[[file:img/piechart_pruned_tree.svg]]

**** Node numbering

Now that we see the relationships between clusters and nodes in the dendrogram,
how can we go back to the data -- which nodes represent which node IDs in the
data?

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-collection "PieChart" \
    --draw-node-number \
    --output pruned_out
#+END_SRC

[[file:img/numbered_pruned_tree.svg]]

**** Branch width

We can also change the width of the nodes and branches, for instance if we want
thinner branches:

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-collection "PieChart" \
    --draw-max-node-size 40 \
    --output pruned_out
#+END_SRC

[[file:img/thin_pruned_tree.svg]]

**** No scaling

We can remove all scaling for a normal tree and still control the branch widths:

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-collection "PieChart" \
    --draw-max-node-size 40 \
    --draw-no-scale-nodes \
    --output pruned_out
#+END_SRC

[[file:img/no_scaling_pruned_tree.svg]]

How strong is each split? We can tell by drawing the modularity of the children
on top of each node:

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-collection "PieChart" \
    --draw-mark "MarkModularity" \
    --output pruned_out
#+END_SRC

[[file:img/modularity_pruned_tree.svg]]

**** Gene expression

What if we want to draw the gene expression onto the tree in another folder
(requires =--matrix-path=, may take some time depending on matrix size)?

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --matrix-path input \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-leaf "DrawItem (DrawContinuous \"Cd4\")" \
    --draw-max-node-size 10 \
    --draw-no-scale-nodes \
    --output out_gene_expression
#+END_SRC

[[file:img/cd4_pruned_tree.svg]]

While this representation shows the expression of /Cd4/ in each cell and blends
those levels together, due to the sparsity of single cell data these cells and
their respective subtrees may be hard to see without additional processing.
Let's make the branches thicker to see the colors a bit better.

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --matrix-path input \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-leaf "DrawItem (DrawContinuous \"Cd4\")" \
    --draw-max-node-size 40 \
    --draw-no-scale-nodes \
    --output out_gene_expression
#+END_SRC

[[file:img/cd4_large_pruned_tree.svg]]

While this tree makes the expression a bit more visible, there is another tactic
we can use. Instead of the continuous color spectrum of expression values, we
can have a binary "high" and "low" expression. Here, we'll continue to have the
red and white colors represent high and low expressions respectively using the
=--draw-colors= argument. Note that this binary expression technique can be used
for multiple features, hence it's a list of features with cutoffs (so you can be
high in a gene and low in another gene, etc. for all possible combinations).

#+BEGIN_SRC sh
too-many-cells make-tree \
    --prior out \
    --matrix-path input \
    --labels-file labels.csv \
    --smart-cutoff 4 \
    --min-size 1 \
    --draw-leaf "DrawItem (DrawThresholdContinuous [(\"Cd4\", 0)])" \
    --draw-max-node-size 40 \
    --draw-no-scale-nodes \
    --draw-colors "[\"#e41a1c\", \"#ffffff\"]" \
    --output out_gene_expression
#+END_SRC

[[file:img/cd4_binary_large_pruned_tree.svg]]

There, much better! Now it's clearly enriched in the subtree containing the
thymus, where we would expect many T cells to be. If it's still difficult to see
expression, consider using a program like =inkscape= to change the color channel
to a binary, such that instead of displaying blends we can show just the color.
This process has the drawback of losing the fraction of expressing cells, however.

* Documentation
